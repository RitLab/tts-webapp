/**
 * Text-to-Speech API
 * A simple API for converting text to speech.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ritlabs1404@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Success from '../model/Success';
import TtsRequest from '../model/TtsRequest';
import TtsResponse from '../model/TtsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the joinMP3Files operation.
     * @callback module:api/DefaultApi~joinMP3FilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TtsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join mp3 file into one file
     * @param {Array.<File>} files 
     * @param {module:api/DefaultApi~joinMP3FilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TtsResponse}
     */
    joinMP3Files(files, callback) {
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling joinMP3Files");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TtsResponse;
      return this.apiClient.callApi(
        '/api/tts/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinPdfFiles operation.
     * @callback module:api/DefaultApi~joinPdfFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TtsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join pdf file into one file
     * @param {Array.<File>} files 
     * @param {module:api/DefaultApi~joinPdfFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TtsResponse}
     */
    joinPdfFiles(files, callback) {
      let postBody = null;
      // verify the required parameter 'files' is set
      if (files === undefined || files === null) {
        throw new Error("Missing the required parameter 'files' when calling joinPdfFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'files': this.apiClient.buildCollectionParam(files, 'passthrough')
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TtsResponse;
      return this.apiClient.callApi(
        '/api/tts/join-pdf', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readTextToSpeech operation.
     * @callback module:api/DefaultApi~readTextToSpeechCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert text to speech and response with sound
     * @param {module:model/TtsRequest} ttsRequest Text input for conversion with sound
     * @param {module:api/DefaultApi~readTextToSpeechCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    readTextToSpeech(ttsRequest, callback) {
      let postBody = ttsRequest;
      // verify the required parameter 'ttsRequest' is set
      if (ttsRequest === undefined || ttsRequest === null) {
        throw new Error("Missing the required parameter 'ttsRequest' when calling readTextToSpeech");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/api/tts/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the textToSpeech operation.
     * @callback module:api/DefaultApi~textToSpeechCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TtsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert text to speech
     * @param {module:model/TtsRequest} ttsRequest Text input for conversion
     * @param {module:api/DefaultApi~textToSpeechCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TtsResponse}
     */
    textToSpeech(ttsRequest, callback) {
      let postBody = ttsRequest;
      // verify the required parameter 'ttsRequest' is set
      if (ttsRequest === undefined || ttsRequest === null) {
        throw new Error("Missing the required parameter 'ttsRequest' when calling textToSpeech");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TtsResponse;
      return this.apiClient.callApi(
        '/api/tts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
